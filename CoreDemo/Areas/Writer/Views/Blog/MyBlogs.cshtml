@model List<ReadBlogViewModel>

@{
    ViewData["Title"] = ViewLocalizer["Title"];
    Layout = "_WriterLayout";
}


<h2 class="ml-5">@ViewLocalizer["Title"]</h2>

@if (Model.Count == 0)
{
    <h2 class="card-title text-center" style="margin-bottom:3em">@ViewLocalizer["NoBlogsWritten"]</h2>
}else{
<div class="col-lg-12 grid-margin stretch-card">
    <div class="card">
        <div class="card-body">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th> # </th>
                        <th> @ViewLocalizer["BlogTitle"] </th>
                        <th> @ViewLocalizer["Category"] </th>
                        <th> @ViewLocalizer["PublishedDate"] </th>
                        <th> @ViewLocalizer["State"] </th>
                        <th> @ViewLocalizer["Processes"] </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (ReadBlogViewModel blog in Model)
                    {
                        <tr>
                            <td> @blog.Id </td>
                            <td> @blog.Title </td>
                            <td> @blog.CategoryViewModel.Name </td>
                            <td> @blog.CreatedAt </td>
                            <td>
                                @if (blog.Status)
                                {
                                    <span class="badge badge-success">@ViewLocalizer["Active"]</span>
                                }
                                else
                                {
                                    <span class="badge badge-danger">@ViewLocalizer["Passive"]</span>
                                }


                            </td>
                            <td>
                                <a onclick="sendToastrQuestion(@blog.Id)" class="btn btn-danger">@ViewLocalizer["Delete"]</a>
                                <a href="/@nameof(CoreDemo.Areas.Writer)/@nameof(CoreDemo.Areas.Writer.Controllers.BlogController).Replace("Controller","")/@nameof(CoreDemo.Areas.Writer.Controllers.BlogController.UpdateBlog)/@blog.Id" class="btn btn-warning">@ViewLocalizer["Edit"]</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
}

<script>


    function sendToastrQuestion(id) {
        swal("@ViewLocalizer["ConfirmDeletingBlog"]", {
            buttons: {
                yes: {
                    text: "@ViewLocalizer["Yes"]",
                    value: "true",
                },
                no: {
                    text: "@ViewLocalizer["No"]",
                    value: "false",
                },
            },
        })
            .then(async (value) => {

                switch (value) {
                    case "true":
                        toastr.success("@ViewLocalizer["SuccessfullyDeletedBlog"]", "", {
                            "positionClass": "toast-bottom-right"
                        });
                        //Just like Thread.Sleep
                        await new Promise(resolve => setTimeout(resolve, 3000));
                        window.location.href = "/@nameof(CoreDemo.Areas.Writer)/@nameof(CoreDemo.Areas.Writer.Controllers.BlogController).Replace("Controller","")/@nameof(CoreDemo.Areas.Writer.Controllers.BlogController.DeleteBlog)/" + id
                        break;
                    case "false":
                        break;
                }
            });
    }
</script>